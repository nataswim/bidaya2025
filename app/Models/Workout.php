<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Support\Str;

/**
 * ğŸ‡¬ğŸ‡§ Workout model representing a workout in the system
 * ğŸ‡«ğŸ‡· ModÃ¨le Workout reprÃ©sentant un workout dans le systÃ¨me
 * 
 * @file app/Models/Workout.php
 */
class Workout extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'title',
        'slug',
        'short_description',
        'long_description',
        'total',
    ];

    protected $casts = [
        'total' => 'integer',
        'created_at' => 'datetime',
        'updated_at' => 'datetime',
    ];

    /**
     * ğŸ‡¬ğŸ‡§ Boot the model
     * ğŸ‡«ğŸ‡· DÃ©marrer le modÃ¨le
     */
    protected static function boot()
    {
        parent::boot();

        static::creating(function ($workout) {
            // ğŸ‡¬ğŸ‡§ Auto-generate slug / ğŸ‡«ğŸ‡· GÃ©nÃ©ration automatique du slug
            if (empty($workout->slug)) {
                $workout->slug = Str::slug($workout->title);
            }
        });

        static::updating(function ($workout) {
            if ($workout->isDirty('title') && empty($workout->slug)) {
                $workout->slug = Str::slug($workout->title);
            }
        });
    }

    /**
     * ğŸ‡¬ğŸ‡§ Get the categories that belong to this workout
     * ğŸ‡«ğŸ‡· Obtenir les catÃ©gories qui appartiennent Ã  ce workout
     */
    public function categories(): BelongsToMany
    {
        return $this->belongsToMany(WorkoutCategory::class, 'workout_workout_category')
                    ->withPivot('order_number')
                    ->withTimestamps()
                    ->orderBy('workout_categories.name', 'asc');
    }

    /**
     * ğŸ‡¬ğŸ‡§ Scope for ordered workouts by title
     * ğŸ‡«ğŸ‡· Scope pour les workouts ordonnÃ©s par titre
     */
    public function scopeOrdered($query)
    {
        return $query->orderBy('title', 'asc');
    }

    /**
     * ğŸ‡¬ğŸ‡§ Get excerpt from content
     * ğŸ‡«ğŸ‡· Obtenir un extrait du contenu
     */
    public function getExcerptAttribute(): string
    {
        if ($this->short_description) {
            return strip_tags($this->short_description);
        }
        
        return Str::limit(strip_tags($this->long_description), 160);
    }

    /**
     * ğŸ‡¬ğŸ‡§ Format total in meters
     * ğŸ‡«ğŸ‡· Formater le total en mÃ¨tres
     */
    public function getFormattedTotalAttribute(): string
    {
        if ($this->total >= 1000) {
            return number_format($this->total / 1000, 2) . ' km';
        }
        return $this->total . ' m';
    }

    /**
     * ğŸ‡¬ğŸ‡§ Get the route key name for model binding
     * ğŸ‡«ğŸ‡· Obtenir le nom de la clÃ© de route pour la liaison du modÃ¨le
     */
    public function getRouteKeyName(): string
    {
        return 'slug';
    }
}