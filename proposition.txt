<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('categories', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('slug')->nullable()->index();
            $table->text('description')->nullable();
            $table->string('group_name')->nullable()->index();
            $table->string('image')->nullable();
            
            // SEO fields
            $table->string('meta_title')->nullable();
            $table->text('meta_description')->nullable();
            $table->text('meta_keyword')->nullable();
            
            // Ordering and status
            $table->integer('order')->nullable()->index();
            $table->string('status')->default('Active')->index();
            
            // Audit fields - utilisation de foreignId pour cohérence avec users
            $table->foreignId('created_by')
                ->nullable()
                ->constrained('users')
                ->nullOnDelete();
            $table->foreignId('updated_by')
                ->nullable()
                ->constrained('users')
                ->nullOnDelete();
            $table->foreignId('deleted_by')
                ->nullable()
                ->constrained('users')
                ->nullOnDelete();
            
            $table->timestamps();
            $table->softDeletes();
            
            // Indexes for performance
            $table->index(['status', 'deleted_at']);
            $table->index(['group_name', 'status']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('categories');
    }
};



<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('tags', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('slug')->nullable()->index();
            $table->string('group_name')->nullable()->index();
            $table->text('description')->nullable();
            $table->string('image')->nullable();
            
            // Status
            $table->string('status')->default('Active')->index();
            
            // SEO fields
            $table->string('meta_title')->nullable();
            $table->text('meta_description')->nullable();
            $table->text('meta_keyword')->nullable();
            
            // Audit fields avec foreign keys
            $table->foreignId('created_by')
                ->nullable()
                ->constrained('users')
                ->nullOnDelete();
            $table->foreignId('updated_by')
                ->nullable()
                ->constrained('users')
                ->nullOnDelete();
            $table->foreignId('deleted_by')
                ->nullable()
                ->constrained('users')
                ->nullOnDelete();
            
            $table->timestamps();
            $table->softDeletes();
            
            // Composite indexes
            $table->index(['status', 'deleted_at']);
            $table->unique(['slug', 'deleted_at']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('tags');
    }
};



<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('posts', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('slug')->nullable()->index();
            $table->text('intro')->nullable();
            $table->longText('content')->nullable();
            $table->string('type')->nullable()->index();
            
            // Category relationship
            $table->foreignId('category_id')
                ->nullable()
                ->constrained('categories')
                ->nullOnDelete();
            $table->string('category_name')->nullable(); // Dénormalisation pour performance
            
            // Feature and media
            $table->boolean('is_featured')->default(false)->index();
            $table->string('image')->nullable();
            
            // SEO fields
            $table->string('meta_title')->nullable();
            $table->text('meta_keywords')->nullable();
            $table->text('meta_description')->nullable();
            $table->string('meta_og_image')->nullable();
            $table->string('meta_og_url')->nullable();
            
            // Metrics and ordering
            $table->unsignedInteger('hits')->default(0)->index();
            $table->integer('order')->nullable();
            
            // Status and moderation
            $table->string('status')->default('Published')->index();
            $table->foreignId('moderated_by')
                ->nullable()
                ->constrained('users')
                ->nullOnDelete();
            $table->datetime('moderated_at')->nullable();
            
            // Authorship
            $table->foreignId('created_by')
                ->nullable()
                ->constrained('users')
                ->nullOnDelete();
            $table->string('created_by_name')->nullable();
            $table->string('created_by_alias')->nullable();
            $table->foreignId('updated_by')
                ->nullable()
                ->constrained('users')
                ->nullOnDelete();
            $table->foreignId('deleted_by')
                ->nullable()
                ->constrained('users')
                ->nullOnDelete();
            
            // Timestamps
            $table->timestamp('published_at')->nullable()->index();
            $table->timestamps();
            $table->softDeletes();
            
            // Composite indexes for performance
            $table->index(['status', 'published_at', 'deleted_at']);
            $table->index(['type', 'status', 'deleted_at']);
            $table->index(['is_featured', 'status', 'published_at']);
            $table->unique(['slug', 'deleted_at']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('posts');
    }
};




<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('taggables', function (Blueprint $table) {
            $table->id();
            
            $table->foreignId('tag_id')
                ->constrained('tags')
                ->cascadeOnDelete();
            
            // Morphs crée automatiquement taggable_id (unsignedBigInteger) 
            // et taggable_type (string) avec les index appropriés
            $table->morphs('taggable');
            
            // Index unique pour éviter les doublons
            $table->unique(['tag_id', 'taggable_id', 'taggable_type'], 'taggables_unique');
            
            // Pas de timestamps sur une table pivot simple
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('taggables');
    }
};







<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('roles', function (Blueprint $table) {
            $table->id();
            $table->string('name', 100)->unique();
            $table->string('slug', 120)->unique()->index();
            $table->string('display_name', 100)->nullable(); // Nom affiché à l'utilisateur
            $table->text('description')->nullable();
            $table->integer('level')->default(0)->index(); // Hiérarchie des rôles
            $table->boolean('is_default')->default(false); // Rôle par défaut pour nouveaux users
            $table->timestamps();
            
            $table->index(['level', 'is_default']);
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('roles');
    }
};




<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('permissions', function (Blueprint $table) {
            $table->id();
            $table->string('name', 100)->unique();
            $table->string('slug', 120)->unique()->index();
            $table->string('group', 50)->nullable()->index(); // Grouper les permissions
            $table->text('description')->nullable();
            $table->timestamps();
        });

        // Table pivot role_permission
        Schema::create('role_permission', function (Blueprint $table) {
            $table->id();
            $table->foreignId('role_id')->constrained()->cascadeOnDelete();
            $table->foreignId('permission_id')->constrained()->cascadeOnDelete();
            $table->timestamps();
            
            $table->unique(['role_id', 'permission_id']);
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('role_permission');
        Schema::dropIfExists('permissions');
    }
};




<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::table('users', function (Blueprint $table) {
            // Ajout des nouveaux champs
            $table->string('username', 60)->nullable()->unique()->after('id');
            $table->string('first_name', 100)->nullable()->after('username');
            $table->string('last_name', 100)->nullable()->after('first_name');
            
            // Relation avec les rôles
            $table->foreignId('role_id')
                ->nullable()
                ->after('remember_token')
                ->constrained('roles')
                ->nullOnDelete();
            
            // Champs additionnels
            $table->string('avatar')->nullable()->after('role_id');
            $table->text('bio')->nullable()->after('avatar');
            $table->string('phone', 20)->nullable()->after('bio');
            $table->date('date_of_birth')->nullable()->after('phone');
            
            // Status et tracking
            $table->enum('status', ['active', 'inactive', 'suspended', 'banned'])
                ->default('active')
                ->after('date_of_birth');
            $table->timestamp('last_login_at')->nullable()->after('status');
            $table->string('last_login_ip', 45)->nullable()->after('last_login_at');
            $table->unsignedInteger('login_count')->default(0)->after('last_login_ip');
            
            // Préférences utilisateur
            $table->json('preferences')->nullable()->after('login_count');
            $table->string('locale', 5)->default('fr')->after('preferences');
            $table->string('timezone', 50)->default('Europe/Paris')->after('locale');
            
            // Soft deletes
            $table->softDeletes();
            
            // Index
            $table->index('status');
            $table->index(['status', 'deleted_at']);
            $table->index('last_login_at');
        });
    }

    public function down(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->dropForeign(['role_id']);
            $table->dropColumn([
                'username', 'first_name', 'last_name',
                'role_id', 'avatar', 'bio', 'phone',
                'date_of_birth', 'status', 'last_login_at',
                'last_login_ip', 'login_count', 'preferences',
                'locale', 'timezone', 'deleted_at'
            ]);
        });
    }
};


<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class RoleSeeder extends Seeder
{
    public function run(): void
    {
        $roles = [
            [
                'name' => 'Super Admin',
                'slug' => 'super-admin',
                'display_name' => 'Super Administrateur',
                'description' => 'Accès complet au système',
                'level' => 100,
                'is_default' => false,
            ],
            [
                'name' => 'Admin',
                'slug' => 'admin',
                'display_name' => 'Administrateur',
                'description' => 'Gestion du contenu et des utilisateurs',
                'level' => 80,
                'is_default' => false,
            ],
            [
                'name' => 'Editor',
                'slug' => 'editor',
                'display_name' => 'Éditeur',
                'description' => 'Peut créer et éditer du contenu',
                'level' => 60,
                'is_default' => false,
            ],
            [
                'name' => 'Author',
                'slug' => 'author',
                'display_name' => 'Auteur',
                'description' => 'Peut créer du contenu',
                'level' => 40,
                'is_default' => false,
            ],
            [
                'name' => 'User',
                'slug' => 'user',
                'display_name' => 'Utilisateur',
                'description' => 'Utilisateur standard',
                'level' => 10,
                'is_default' => true,
            ],
        ];

        foreach ($roles as $role) {
            $role['created_at'] = now();
            $role['updated_at'] = now();
            DB::table('roles')->insert($role);
        }
    }
}



