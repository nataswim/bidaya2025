@extends('layouts.admin')

@section('title', 'Créer un rôle')
@section('page-title', 'Nouveau rôle')
@section('page-description', 'Création d\'un nouveau rôle utilisateur')

@section('content')
<div class="container-fluid">
    <form method="POST" action="{{ route('admin.roles.store') }}">
        @include('admin.roles.partials.form', [
            'submitLabel' => 'Créer le rôle'
        ])
    </form>
</div>
@endsection

@push('styles')
<style>
.bg-gradient-primary {
    background: linear-gradient(135deg, #0ea5e9 0%, #0f172a 100%);
}

.bg-gradient-success {
    background: linear-gradient(135deg, #10b981 0%, #06b6d4 100%);
}

.bg-gradient-info {
    background: linear-gradient(135deg, #06b6d4 0%, #0ea5e9 100%);
}

.bg-gradient-warning {
    background: linear-gradient(135deg, #f59e0b 0%, #10b981 100%);
}
</style>
@endpush

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Auto-génération du slug et display_name
    const nameInput = document.getElementById('name');
    const slugInput = document.getElementById('slug');
    const displayNameInput = document.getElementById('display_name');
    
    if (nameInput) {
        nameInput.addEventListener('input', function() {
            if (slugInput && (!slugInput.value || slugInput.dataset.autoGenerated)) {
                const slug = this.value
                    .toLowerCase()
                    .replace(/[^a-z0-9]+/g, '-')
                    .replace(/^-+|-+$/g, '');
                slugInput.value = slug;
                slugInput.dataset.autoGenerated = 'true';
            }
            
            if (displayNameInput && (!displayNameInput.value || displayNameInput.dataset.autoGenerated)) {
                const displayName = this.value
                    .split(/[-_]/)
                    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                    .join(' ');
                displayNameInput.value = displayName;
                displayNameInput.dataset.autoGenerated = 'true';
            }
        });
    }
    
    if (slugInput) {
        slugInput.addEventListener('input', function() {
            this.dataset.autoGenerated = '';
        });
    }
    
    if (displayNameInput) {
        displayNameInput.addEventListener('input', function() {
            this.dataset.autoGenerated = '';
        });
    }

    // Gestion des permissions
    initPermissions();
});

function initPermissions() {
    updateSelectedPermissions();
}

function toggleGroup(group) {
    const checkbox = document.getElementById('toggle_' + group);
    const groupCheckboxes = document.querySelectorAll(`input[data-group="${group}"]`);
    
    if (checkbox && groupCheckboxes.length > 0) {
        groupCheckboxes.forEach(cb => {
            cb.checked = checkbox.checked;
        });
        updateSelectedPermissions();
    }
}

function updateSelectedPermissions() {
    const selectedCheckboxes = document.querySelectorAll('input[name="permissions[]"]:checked');
    const container = document.getElementById('selected-permissions');
    
    if (!container) return;
    
    if (selectedCheckboxes.length === 0) {
        container.innerHTML = '<small class="text-muted">Aucune permission sélectionnée</small>';
    } else {
        let html = `<div class="fw-bold text-primary mb-2">${selectedCheckboxes.length} permission(s)</div>`;
        const badges = Array.from(selectedCheckboxes).slice(0, 10).map(cb => {
            const label = cb.nextElementSibling?.querySelector('strong')?.textContent || 'Permission';
            return `<span class="badge bg-primary-subtle text-primary me-1 mb-1">${label}</span>`;
        }).join('');
        
        html += `<div>${badges}</div>`;
        
        if (selectedCheckboxes.length > 10) {
            html += `<small class="text-muted">et ${selectedCheckboxes.length - 10} autres...</small>`;
        }
        
        container.innerHTML = html;
    }
}

// Écouter les changements sur les checkboxes de permissions
document.addEventListener('change', function(e) {
    if (e.target.classList.contains('permission-checkbox')) {
        updateSelectedPermissions();
    }
});
</script>
@endpush