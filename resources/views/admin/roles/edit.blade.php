@extends('layouts.admin')

@section('title', 'Modifier un rôle')
@section('page-title', 'Modifier le rôle')
@section('page-description', 'Modification du rôle : ' . ($role->display_name ?? $role->name))

@section('content')
<div class="container-fluid">
    <form method="POST" action="{{ route('admin.roles.update', $role) }}">
        @method('PUT')
        @include('admin.roles.partials.form', [
            'submitLabel' => 'Mettre A jour le rôle',
            'role' => $role
        ])
    </form>
</div>
@endsection

@push('styles')
<style>
.bg-gradient-primary {
    background: linear-gradient(135deg, #0ea5e9 0%, #0f172a 100%);
}

.bg-gradient-success {
    background: linear-gradient(135deg, #10b981 0%, #06b6d4 100%);
}

.bg-gradient-info {
    background: linear-gradient(135deg, #06b6d4 0%, #0ea5e9 100%);
}

.bg-gradient-warning {
    background: linear-gradient(135deg, #f59e0b 0%, #10b981 100%);
}
</style>
@endpush

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Auto-generation conditionnelle en edition
    const nameInput = document.getElementById('name');
    const slugInput = document.getElementById('slug');
    const displayNameInput = document.getElementById('display_name');
    
    if (nameInput) {
        nameInput.addEventListener('input', function() {
            if (slugInput && slugInput.dataset.autoGenerated) {
                const slug = this.value
                    .toLowerCase()
                    .replace(/[^a-z0-9]+/g, '-')
                    .replace(/^-+|-+$/g, '');
                slugInput.value = slug;
            }
            
            if (displayNameInput && displayNameInput.dataset.autoGenerated) {
                const displayName = this.value
                    .split(/[-_]/)
                    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                    .join(' ');
                displayNameInput.value = displayName;
            }
        });
    }
    
    if (slugInput) {
        slugInput.addEventListener('input', function() {
            this.dataset.autoGenerated = '';
        });
    }
    
    if (displayNameInput) {
        displayNameInput.addEventListener('input', function() {
            this.dataset.autoGenerated = '';
        });
    }

    // Confirmation pour changements critiques
    const isDefaultCheckbox = document.getElementById('is_default');
    if (isDefaultCheckbox) {
        const originalIsDefault = isDefaultCheckbox.checked;
        
        isDefaultCheckbox.addEventListener('change', function() {
            if (this.checked && !originalIsDefault) {
                const confirmed = confirm('Definir ce rôle comme defaut remplacera le rôle par defaut actuel. Continuer ?');
                if (!confirmed) {
                    this.checked = false;
                }
            }
        });
    }

    // Initialiser la gestion des permissions
    initPermissions();
});

function initPermissions() {
    updateSelectedPermissions();
    checkGroupToggles();
}

function toggleGroup(group) {
    const checkbox = document.getElementById('toggle_' + group);
    const groupCheckboxes = document.querySelectorAll(`input[data-group="${group}"]`);
    
    if (checkbox && groupCheckboxes.length > 0) {
        groupCheckboxes.forEach(cb => {
            cb.checked = checkbox.checked;
        });
        updateSelectedPermissions();
    }
}

function checkGroupToggles() {
    const groups = [...new Set(Array.from(document.querySelectorAll('input[data-group]')).map(cb => cb.dataset.group))];
    
    groups.forEach(group => {
        const groupCheckboxes = document.querySelectorAll(`input[data-group="${group}"]`);
        const checkedCheckboxes = document.querySelectorAll(`input[data-group="${group}"]:checked`);
        const toggleCheckbox = document.getElementById('toggle_' + group);
        
        if (toggleCheckbox && groupCheckboxes.length > 0) {
            if (checkedCheckboxes.length === groupCheckboxes.length) {
                toggleCheckbox.checked = true;
                toggleCheckbox.indeterminate = false;
            } else if (checkedCheckboxes.length > 0) {
                toggleCheckbox.checked = false;
                toggleCheckbox.indeterminate = true;
            } else {
                toggleCheckbox.checked = false;
                toggleCheckbox.indeterminate = false;
            }
        }
    });
}

function updateSelectedPermissions() {
    const selectedCheckboxes = document.querySelectorAll('input[name="permissions[]"]:checked');
    const container = document.getElementById('selected-permissions');
    
    if (!container) return;
    
    if (selectedCheckboxes.length === 0) {
        container.innerHTML = '<small class="text-muted">Aucune permission selectionnee</small>';
    } else {
        let html = `<div class="fw-bold text-primary mb-2">${selectedCheckboxes.length} permission(s)</div>`;
        const badges = Array.from(selectedCheckboxes).slice(0, 10).map(cb => {
            const label = cb.nextElementSibling?.querySelector('strong')?.textContent || 'Permission';
            return `<span class="badge bg-primary-subtle text-primary me-1 mb-1">${label}</span>`;
        }).join('');
        
        html += `<div>${badges}</div>`;
        
        if (selectedCheckboxes.length > 10) {
            html += `<small class="text-muted">et ${selectedCheckboxes.length - 10} autres...</small>`;
        }
        
        container.innerHTML = html;
    }
    
    checkGroupToggles();
}

// ecouter les changements sur les checkboxes de permissions
document.addEventListener('change', function(e) {
    if (e.target.classList.contains('permission-checkbox')) {
        updateSelectedPermissions();
    }
});
</script>
@endpush